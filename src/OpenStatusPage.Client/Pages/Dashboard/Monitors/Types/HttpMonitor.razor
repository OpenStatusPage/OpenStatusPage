@using OpenStatusPage.Shared.DataTransferObjects.Monitors
@using OpenStatusPage.Shared.DataTransferObjects.Monitors.Dns
@using OpenStatusPage.Shared.DataTransferObjects.Monitors.Http
@using OpenStatusPage.Shared.Enumerations

@inherits MonitorBase

<MonitorBase MonitorModel=@HttpMonitorModel />

<MudTextField 
    Label="URL*" 
    Class="mt-4"
    @bind-Value="HttpMonitorModel.Url" 
    For="@(() => HttpMonitorModel.Url)"/>
    
<MudSelect 
    Label="Method*"
    Class="mt-4"
    @bind-Value="HttpMonitorModel.Method" 
    For="@(() => HttpMonitorModel.Method)">
    @foreach (HttpVerb item in Enum.GetValues(typeof(HttpVerb)))
    {
        <MudSelectItem Value="@item">@item</MudSelectItem>
    }
</MudSelect>

<MudNumericField
    Label="Max redirects*"
    Class="mt-4"
    @bind-Value="HttpMonitorModel.MaxRedirects" 
    For="@(() => HttpMonitorModel.MaxRedirects)"/>

<MudTextField
    Label="Headers"
    Class="mt-4"
    Lines="4" 
    Placeholder=@("X-Api-Key=MyApiKey\nAnotherHeader=AnotherValue")
    HelperText="One key=value pair per line" 
    @bind-Value="HttpMonitorModel.Headers" 
    For="@(() => HttpMonitorModel.Headers)"/>

<MudTextField
    Label="Body"
    Class="mt-4"
    Lines="4" 
    Placeholder=@("{\n\t\"somekey\":\"somevalue\"\n}")
    HelperText="Body as raw string (json content recommended)" 
    @bind-Value="HttpMonitorModel.Body" 
    For="@(() => HttpMonitorModel.Body)"/>

<MudSelect 
    Label="Authentication*"
    Class="mt-4"
    @bind-Value="HttpMonitorModel.AuthenticationScheme" 
    For="@(() => HttpMonitorModel.AuthenticationScheme)">
    <MudSelectItem Value="@(HttpAuthenticationScheme.None)">None</MudSelectItem>
    <MudSelectItem Value="@(HttpAuthenticationScheme.Basic)">Basic</MudSelectItem>
    <MudSelectItem Value="@(HttpAuthenticationScheme.Bearer)">Bearer</MudSelectItem>
    <MudSelectItem Value="@(HttpAuthenticationScheme.Digest)">Digest</MudSelectItem>
</MudSelect>

@if(HttpMonitorModel.AuthenticationScheme != HttpAuthenticationScheme.None)
{
    var label = HttpMonitorModel.AuthenticationScheme switch
    {
        HttpAuthenticationScheme.Bearer => "Token*",
        _ => "Username*"
    };

    <MudTextField 
    Label="@label" 
    Class="mt-4"
    @bind-Value="HttpMonitorModel.AuthenticationBase" 
    For="@(() => HttpMonitorModel.AuthenticationBase)"/>
}

@if(HttpMonitorModel.AuthenticationScheme == HttpAuthenticationScheme.Basic || HttpMonitorModel.AuthenticationScheme == HttpAuthenticationScheme.Digest)
{
    <MudTextField 
        Label="Password*" 
        Class="mt-4"
        @bind-Value="HttpMonitorModel.AuthenticationAdditional" 
        For="@(() => HttpMonitorModel.AuthenticationAdditional)"
        InputType="@_passwordInput"
        Adornment="Adornment.End" 
        AdornmentIcon="@_passwordInputIcon" 
        OnAdornmentClick="PasswordToggleShowAsync"/>
}
else
{
    HttpMonitorModel.AuthenticationAdditional = null;
}

<MudText Typo="Typo.h5" Class="mt-8">Rules</MudText>

@foreach (var rule in GetAllRules().OrderBy(x => x.OrderIndex))
{
    <MudPaper Elevation="1" Class="pa-4 mt-4">
        <MudGrid Spacing="0" Class="align-center justify-space-between">
            <MudItem Class="flex-grow-1 flex-md-grow-0">
                <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                    <div class="d-flex">
                        <MudButton Variant="Variant.Outlined" FullWidth="true" StartIcon="@Icons.Filled.KeyboardArrowUp" OnClick="() => MoveRuleUp(rule)">Move up</MudButton>
                        <MudButton Class="ml-2" Variant="Variant.Outlined" FullWidth="true" StartIcon="@Icons.Filled.KeyboardArrowDown" OnClick="() => MoveRuleDown(rule)">Move down</MudButton>
                    </div>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <div class="d-flex flex-column mr-2">
                        <MudIconButton Class="pa-0" Icon="@Icons.Filled.KeyboardArrowUp" OnClick="() => MoveRuleUp(rule)" />
                        <MudIconButton Class="pa-0" Icon="@Icons.Filled.KeyboardArrowDown" OnClick="() => MoveRuleDown(rule)" />
                    </div>
                </MudHidden>
            </MudItem>

            <MudItem xs="12" md="7" Class="d-flex align-center">
            @switch (rule)
            {
                case ResponseTimeRuleDto responseTimeRule:
                {
                    <MudText Class="mr-1" Style="white-space: nowrap">Response time (ms)</MudText>

                    <MudSelect Class="mr-1" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="responseTimeRule.ComparisonType" Adornment="Adornment.None">
                        <MudSelectItem Value="@(NumericComparisonType.GreaterThan)">></MudSelectItem>
                        <MudSelectItem Value="@(NumericComparisonType.GreaterThanOrEqual)">>=</MudSelectItem>
                        <MudSelectItem Value="@(NumericComparisonType.Equal)">==</MudSelectItem>
                        <MudSelectItem Value="@(NumericComparisonType.NotEqual)">!=</MudSelectItem>
                        <MudSelectItem Value="@(NumericComparisonType.LessThanOrEqual)">@("<=")</MudSelectItem>
                        <MudSelectItem Value="@(NumericComparisonType.LessThan)">@("<")</MudSelectItem>
                    </MudSelect>

                    <MudNumericField Class="mr-1" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="comparison value in ms" @bind-Value="responseTimeRule.ComparisonValue" Required="true" RequiredError="This field is required."/>
                    break;
                }
                
                case ResponseBodyRuleDto responseBodyRule:
                {
                    <MudText Class="mr-1" Style="white-space: nowrap">Body</MudText>
                    <MudSelect Class="mr-1" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="responseBodyRule.ComparisonType" Adornment="Adornment.None">
                        <MudSelectItem Value="@(StringComparisonType.Contains)">contains</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.NotContains)">does not contain</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.Equal)">equals</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.NotEqual)">is not equal to</MudSelectItem>
                    </MudSelect>
                    <MudTextField Class="mr-1" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="body content" @bind-Value="responseBodyRule.ComparisonValue" Required="true" RequiredError="This field is required."/>
                    break;
                }
                
                case ResponseHeaderRuleDto responseHeaderRule:
                {
                    <MudText Class="mr-1" Style="white-space: nowrap">Header</MudText>
                    <MudTextField Class="mr-1" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="Header name" @bind-Value="responseHeaderRule.Key" Required="true" RequiredError="This field is required."/>
                    <MudSelect Class="mr-1" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="responseHeaderRule.ComparisonType" Adornment="Adornment.None">
                        <MudSelectItem Value="@(StringComparisonType.NotNull)">exists</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.Null)">does not exist</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.Contains)">contains</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.NotContains)">does not contain</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.Equal)">equals</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.NotEqual)">is not equal to</MudSelectItem>
                    </MudSelect>
                    @if(responseHeaderRule.ComparisonType != StringComparisonType.Null && responseHeaderRule.ComparisonType != StringComparisonType.NotNull)
                    {
                    <MudTextField Class="mr-1" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="header value" @bind-Value="responseHeaderRule.ComparisonValue" Required="true" RequiredError="This field is required."/>
                    }
                    break;
                }
                
                case SslCertificateRuleDto sslCertificateRule:
                {
                    <MudText Class="mr-1" Style="white-space: nowrap">SSL Certificate</MudText>
                    <MudSelect Class="mr-1" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="sslCertificateRule.CheckType" Adornment="Adornment.None">
                        <MudSelectItem Value="@(SslCertificateCheckType.NotExists)">does not exist</MudSelectItem>
                        <MudSelectItem Value="@(SslCertificateCheckType.NotValid)">is not valid</MudSelectItem>
                    </MudSelect>
                    @if(sslCertificateRule.CheckType == SslCertificateCheckType.NotValid)
                    {
                        <MudNumericField 
                            Class="mr-1" 
                            Variant="Variant.Outlined" 
                            Margin="Margin.Dense" 
                            Label="for days (optional)" 
                            T="int?"
                            Value="SslTimeSpanAsDays(sslCertificateRule)" 
                            ValueChanged="(value) => UpdateSslTimespan(sslCertificateRule, value)" />
                        }
                        else if(sslCertificateRule.CheckType == SslCertificateCheckType.NotExists)
                        {
                            sslCertificateRule.MinValidTimespan = null;
                        }
                    break;
                }

                case StatusCodeRuleDto statusCodeRule:
                {
                    <MudText Class="mr-1" Style="white-space: nowrap">Statuscode is not</MudText>
                    <MudNumericField 
                        Class="mr-1" 
                        Variant="Variant.Outlined" 
                        Margin="Margin.Dense" 
                        @bind-Value="statusCodeRule.Value" 
                        Required="true" 
                        RequiredError="This field is required." />
                    <MudNumericField 
                        Class="mr-1" 
                        Variant="Variant.Outlined" 
                        Margin="Margin.Dense" 
                        Placeholder="range value (optional)" 
                        @bind-Value="statusCodeRule.UpperRangeValue" />
                    break;
                }
            }
            </MudItem>

            <MudItem xs="12" md="4">
                <div class="d-flex">
                    <MudSelect Label="Result status" FullWidth="false" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="rule.ViolationStatus">
                        <MudSelectItem Value="@(ServiceStatus.Degraded)">
                            <div class="d-flex align-center"><MudIcon Icon="@Icons.Outlined.WarningAmber" Color="Color.Warning" Class="mr-1" /> Degraded</div>
                        </MudSelectItem>
                        <MudSelectItem Value="@(ServiceStatus.Unavailable)">
                            <div class="d-flex align-center"><MudIcon Icon="@Icons.Outlined.ErrorOutline" Color="Color.Error" Class="mr-1" /> Unavailable</div>
                        </MudSelectItem>
                    </MudSelect>

                    <MudIconButton Icon="@Icons.Outlined.Close" Class="pa-0 ml-2" OnClick="() => RemoveRule(rule)" />
                </div>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

<MudPaper Elevation="1" Class="pa-4 mt-4">
    <MudSelect Style="margin-top: -16px" Placeholder="Add a rule ..." T="string" Value="null" ValueChanged="(value) => OnRuleSelected(value)">
        <MudSelectItem Value="@(nameof(StatusCodeRuleDto))">Status code</MudSelectItem>
        <MudSelectItem Value="@(nameof(ResponseTimeRuleDto))">Response time</MudSelectItem>
        <MudSelectItem Value="@(nameof(ResponseHeaderRuleDto))">Response header</MudSelectItem>
        <MudSelectItem Value="@(nameof(ResponseBodyRuleDto))">Response body</MudSelectItem>
        <MudSelectItem Value="@(nameof(SslCertificateRuleDto))">SSL Ceritifcate</MudSelectItem>
    </MudSelect>
</MudPaper>

<MudPaper Elevation="1" Class="pa-4 mt-4 d-flex">
    <MudText Typo="Typo.body1"><b>Default rule</b> <span style="@($"color:{Colors.Green.Darken1};")">Operational</span> if 2xx status code was returned <span style="@($"color:{Colors.Red.Darken1};")">Unavailable</span> otherwise.</MudText>
</MudPaper>
