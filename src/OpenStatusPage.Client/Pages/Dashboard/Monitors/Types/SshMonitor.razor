@using OpenStatusPage.Shared.DataTransferObjects.Monitors
@using OpenStatusPage.Shared.DataTransferObjects.Monitors.Dns
@using OpenStatusPage.Shared.DataTransferObjects.Monitors.Ssh
@using OpenStatusPage.Shared.Enumerations
@using static OpenStatusPage.Client.Pages.Dashboard.Monitors.Types.SshMonitor.SshMonitorViewModel

@inherits MonitorBase

<MonitorBase MonitorModel=@SshMonitorModel />

<MudTextField 
    Label="Hostname*" 
    Class="mt-4"
    @bind-Value="SshMonitorModel.Hostname" 
    For="@(() => SshMonitorModel.Hostname)"/>
    
<MudNumericField
    Label="Port"
    Placeholder="SSH port (Default 22)"
    Class="mt-4"
    @bind-Value="SshMonitorModel.Port" 
    For="@(() => SshMonitorModel.Port)"/>

<MudTextField 
    Label="Username*" 
    Class="mt-4"
    @bind-Value="SshMonitorModel.Username" 
    For="@(() => SshMonitorModel.Username)"/>
    
<MudTextField 
    Label="Password" 
    Class="mt-4"
    @bind-Value="SshMonitorModel.Password" 
    For="@(() => SshMonitorModel.Password)"
    InputType="@_passwordInput"
    Adornment="Adornment.End" 
    AdornmentIcon="@_passwordInputIcon" 
    OnAdornmentClick="PasswordToggleShowAsync"/>  
    
<MudTextField 
    Label="RSA Private Key" 
    Class="@(_showPrivateKey ? "mt-4" : "mt-4 blur-text-area")"
    Lines="5"
    @bind-Value="SshMonitorModel.PrivateKey" 
    For="@(() => SshMonitorModel.PrivateKey)"
    Adornment="Adornment.End" 
    AdornmentIcon="@_privateKeyInputIcon" 
    OnAdornmentClick="PrivateKeyToggleShowAsync"/>
    
<MudTextField 
    Label="Command" 
    HelperText="Post login command"
    Class="mt-4"
    @bind-Value="SshMonitorModel.Command" 
    For="@(() => SshMonitorModel.Command)"/>
    
<MudText Typo="Typo.h5" Class="mt-8">Rules</MudText>

@foreach (var rule in SshMonitorModel.CommandResultRules.OrderBy(x => x.OrderIndex))
{
    <MudPaper Elevation="1" Class="pa-4 mt-4">
        <MudGrid Spacing="0" Class="align-center justify-space-between">
            <MudItem Class="flex-grow-1 flex-md-grow-0">
                <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                    <div class="d-flex">
                        <MudButton Variant="Variant.Outlined" FullWidth="true" StartIcon="@Icons.Filled.KeyboardArrowUp" OnClick="() => MoveRuleUp(rule)">Move up</MudButton>
                        <MudButton Class="ml-2" Variant="Variant.Outlined" FullWidth="true" StartIcon="@Icons.Filled.KeyboardArrowDown" OnClick="() => MoveRuleDown(rule)">Move down</MudButton>
                    </div>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <div class="d-flex flex-column mr-2">
                        <MudIconButton Class="pa-0" Icon="@Icons.Filled.KeyboardArrowUp" OnClick="() => MoveRuleUp(rule)" />
                        <MudIconButton Class="pa-0" Icon="@Icons.Filled.KeyboardArrowDown" OnClick="() => MoveRuleDown(rule)" />
                    </div>
                </MudHidden>
            </MudItem>

            <MudItem xs="12" md="7" Class="d-flex align-center">
            @switch (rule)
            {
                case SshCommandResultRuleDto sshCommandResultRule:
                {
                    <MudText Class="mr-1" Style="white-space: nowrap">Command result</MudText>
                    <MudSelect Class="mr-1" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="sshCommandResultRule.ComparisonType" Adornment="Adornment.None">
                        <MudSelectItem Value="@(StringComparisonType.Contains)">contains</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.NotContains)">does not contain</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.Equal)">equals</MudSelectItem>
                        <MudSelectItem Value="@(StringComparisonType.NotEqual)">is not equal to</MudSelectItem>
                    </MudSelect>
                    <MudTextField Style="mr-1" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="comparison string" @bind-Value="sshCommandResultRule.ComparisonValue" Required="true" RequiredError="This field is required."/>
                    break;
                }
            }
            </MudItem>

            <MudItem xs="12" md="4">
                <div class="d-flex">
                    <MudSelect Label="Result status" FullWidth="false" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="rule.ViolationStatus">
                        <MudSelectItem Value="@(ServiceStatus.Degraded)">
                            <div class="d-flex align-center"><MudIcon Icon="@Icons.Outlined.WarningAmber" Color="Color.Warning" Class="mr-1" /> Degraded</div>
                        </MudSelectItem>
                        <MudSelectItem Value="@(ServiceStatus.Unavailable)">
                            <div class="d-flex align-center"><MudIcon Icon="@Icons.Outlined.ErrorOutline" Color="Color.Error" Class="mr-1" /> Unavailable</div>
                        </MudSelectItem>
                    </MudSelect>

                    <MudIconButton Icon="@Icons.Outlined.Close" Class="pa-0 ml-2" OnClick="() => RemoveRule(rule)" />
                </div>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

<MudPaper Elevation="1" Class="pa-4 mt-4">
    <MudSelect Style="margin-top: -16px" Placeholder="Add a rule ..." T="string" Value="null" ValueChanged="(value) => OnRuleSelected(value)">
        <MudSelectItem Value="@(nameof(SshCommandResultRuleDto))">Command result</MudSelectItem>
    </MudSelect>
</MudPaper>

<MudPaper Elevation="1" Class="pa-4 mt-4 d-flex">
    <MudText Typo="Typo.body1"><b>Default rule</b> <span style="@($"color:{Colors.Green.Darken1};")">Operational</span> if login was successful <span style="@($"color:{Colors.Red.Darken1};")">Unavailable</span> otherwise.</MudText>
</MudPaper>
